it is used to adapt new code instead of legacy code

type: structural

most of the time implemented with a interfaces and an abstract class

concepts
    Decouple abstraction and implementation
    encapsulation, composition, inheritance
    changes in abstraction will not affect client
    details will not be right
    gives great flexibility

design
    interfaces and abstract classes
    composition over inheritance
    more than composition
    expect change from both sides
    Abstraction, Implementor, Refined Abstraction, Concrete Implementor